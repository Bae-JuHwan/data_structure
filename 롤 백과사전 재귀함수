// Search_R[챔피언이름] : 주어진 챔피언의 정보를 출력
// Insert_R : 새로운 챔피언의 정보를 입력받아 삽입
// Delete_R[챔피언이름] : 주어진 챔피언에 대한 정보 삭제
// DeleteAll_R[position] : 주어진 위치의 모든 챔피언 정보 삭제
// PrintAll_R : 모든 챔피언의 정보를 배열에 저장된 순서대로 출력
// FindMaxHp_R : 가장 체력이 큰 챔피언의 정보를 출력
// SortByHp_R : 체력이 큰 챔피언부터 순서대로 출력

#include <iostream>
#include <string>

#define MAX 300

using namespace std;

struct Player {
	string name;
	int health;
	int mana;
	int speed;
	int range;
	string position;
};

int SearchRecursive(struct Player* players, int max, int i, string* championName) {
	if (i == MAX) {
		return 0;
	}
	else if (*championName == players[i].name) {
		cout << "이름 : " << players[i].name << ", 체력 : " << players[i].health << ", 마나 : " << players[i].mana <<
			", 속도 : " << players[i].speed << ", 사거리 : " << players[i].range << ", 포지션 : " << players[i].position << '\n';
		cout << '\n';
		return 1;
	}
	return SearchRecursive(players, MAX, ++i, championName);
}

int InsertRecursive(struct Player* players, int max, int i) {
	if (i == MAX) {
		cout << "더 이상 챔피언을 추가할 수 없습니다" << '\n';
		cout << '\n';
		return 0;
	}
	else if (players[i].name == "") {
		Player newPlayer;
		cout << "새로운 챔피언을 추가합니다" << '\n';
		cout << '\n';
		cout << "이름 : ";
		cin >> newPlayer.name;
		cout << "체력 : ";
		cin >> newPlayer.health;
		if (newPlayer.health < 0 || newPlayer.health >= 9999 || cin.fail()) {
			cout << "올바른 형식으로 입력해주세요" << '\n';
			cout << '\n';
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return InsertRecursive(players, MAX, ++i);
		}
		cout << "마나 : ";
		cin >> newPlayer.mana;
		if (newPlayer.mana < 0 || newPlayer.mana >= 9999 || cin.fail()) {
			cout << "올바른 형식으로 입력해주세요" << '\n';
			cout << '\n';
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return InsertRecursive(players, MAX, ++i);
		}
		cout << "속도 : ";
		cin >> newPlayer.speed;
		if (newPlayer.speed < 0 || newPlayer.speed >= 9999 || cin.fail()) {
			cout << "올바른 형식으로 입력해주세요" << '\n';
			cout << '\n';
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return InsertRecursive(players, MAX, ++i);
		}
		cout << "사거리 : ";
		cin >> newPlayer.range;
		if (newPlayer.range < 0 || newPlayer.range >= 9999 || cin.fail()) {
			cout << "올바른 형식으로 입력해주세요" << '\n';
			cout << '\n';
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return InsertRecursive(players, MAX, ++i);
		}
		cout << "포지션 : ";
		cin >> newPlayer.position;
		if (newPlayer.position != "top" && newPlayer.position != "mid" && newPlayer.position != "jungle" && newPlayer.position != "bottom" && newPlayer.position != "support" ) {
			cout << "올바른 형식으로 입력해주세요" << '\n';
			cout << '\n';
			return InsertRecursive(players, MAX, ++i);
		}
		cout << '\n';
		players[i] = newPlayer;
		return 0;
	}
	return InsertRecursive(players, MAX, ++i);
}

int DeleteRecursive(struct Player* players, int max, int i, string* championName) {
	if (i == MAX) {
		return 0;
	}
	else if (*championName == players[i].name) {
		players[i] = Player();
		cout << "해당 챔피언을 삭제하였습니다" << '\n';
		cout << '\n';
		return 1;
	}
	return DeleteRecursive(players, MAX, ++i, championName);
}

int DeleteAllRecursive(struct Player* players, int max, int i, string* position) {
	if (i == MAX) {
		return 0;
	}
	else if (*position == players[i].position) {
		players[i] = Player();
		return 1 + DeleteAllRecursive(players, MAX, ++i, position);
	}
	return DeleteAllRecursive(players, MAX, ++i, position);
}

int PrintAllRecursive(struct Player* players, int max, int i) {
	if (i == MAX) {
		return 0;
	}
	else if (players[i].name != "") {
		cout << "이름 : " << players[i].name << ", 체력 : " << players[i].health << ", 마나 : " << players[i].mana <<
			", 속도 : " << players[i].speed << ", 사거리 : " << players[i].range << ", 포지션 : " << players[i].position << '\n';
		cout << '\n';
	}
	PrintAllRecursive(players, MAX, ++i);
}

int FindMaxHpRecursive(struct Player* players, int max, int i, int* MaxHealth) {
	if (i == MAX) {
		return 0;
	}
	else if (players[i].health > *MaxHealth) {
		*MaxHealth = players[i].health;
	}
	FindMaxHpRecursive(players, MAX, ++i, MaxHealth);
	if (players[i].health == *MaxHealth) {
		cout << "이름 : " << players[i].name << ", 체력 : " << players[i].health << ", 마나 : " << players[i].mana <<
			", 속도 : " << players[i].speed << ", 사거리 : " << players[i].range << ", 포지션 : " << players[i].position << '\n';
		cout << '\n';
	}
}

int SortByHpRecursive(struct Player* players, int max, int i) {
	if (i == MAX) {
		return 0;
	}
	else {
		for (int j = 0; j < MAX - i - 1; ++j) {
			if (players[j].health < players[j + 1].health) {
				Player temp = players[j];
				players[j] = players[j + 1];
				players[j + 1] = temp;
			}
		}
	}
	SortByHpRecursive(players, MAX, ++i);
}

int main() {
	Player players[MAX] = {
		{"Jayce", 3466,	8307, 452, 73, "mid"},
		{ "Vayne", 3318, 2790, 390, 60, "support" },
		{ "Lee Sin", 9864, 6257, 747, 19, "support" },
		{ "Teemo", 1915, 1313, 700, 68, "mid" },
		{ "Nami", 2968, 2153, 803, 74, "support" },
		{ "Jinx", 2583, 3042, 123, 53, "jungle" },
		{ "Cassiopeia", 6067, 7330, 683, 24, "top" },
		{ "Ahri", 4573, 7079, 177, 79, "top" },
		{ "Fiora", 2591, 9329, 337, 81, "jungle" },
		{ "Zac", 9864, 7272, 405, 49, "bottom" },
		{ "Janna", 4922, 2275, 690,	66, "jungle" },
		{ "Ashe", 7421, 5549, 428, 31, "top" },
		{ "Twitch", 2980, 7703, 204, 91, "mid" },
		{ "Ezreal", 3660, 9835, 274, 44, "mid" },
		{ "Sona", 5655, 8442, 252, 26, "bottom" },
		{ "Lulu", 3231, 2014, 503, 32, "support" },
		{ "Amumu", 6763, 3994, 427, 19, "jungle" },
		{ "Master Yi", 5737, 7168, 434, 61, "top" },
		{ "Jarvan", 1895, 3070, 323, 80, "mid" },
		{ "Shen", 4794, 9220, 783, 42, "mid" },
		{ "Fizz", 9864, 1913, 433, 38, "bottom" },
		{ "Taric", 6158, 7451, 160, 36, "bottom" }
	};
	for (int i = 22; i < MAX; ++i) {
		players[i] = { "", 0, 0, 0, 0, "" };
	}

	cout << "명령어를 입력하세요" << '\n';
	cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
	cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
	cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
	cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
	cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
	cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
	cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
	cout << '\n';

	while (true) {
		string command;
		getline(cin, command);

		if (command.substr(0, 9) == "Search_R[") {
			size_t startPos = command.find('[');
			size_t endPos = command.find(']');

			if (startPos != string::npos && endPos != string::npos && endPos > startPos - 1) {
				string championName = command.substr(startPos + 1, endPos - startPos - 1);

				if (!SearchRecursive(players, MAX, 0, &championName)) {
					cout << "잘못된 챔피언 입니다. 다시 입력해주세요" << '\n';
					cout << '\n';
				}
			}
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else if (command == "Insert_R") {
			InsertRecursive(players, MAX, 0);
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
			cin.ignore();
		}
		else if (command.substr(0, 9) == "Delete_R[") {
			size_t startPos = command.find('[');
			size_t endPos = command.find(']');

			if (startPos != string::npos && endPos != string::npos && endPos > startPos - 1) {
				string championName = command.substr(startPos + 1, endPos - startPos - 1);

				if (!DeleteRecursive(players, MAX, 0, &championName)) {
					cout << "잘못된 챔피언 입니다. 다시 입력해주세요" << '\n';
					cout << '\n';
				}
			}
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else if (command.substr(0, 12) == "DeleteAll_R[") {
			size_t startPos = command.find('[');
			size_t endPos = command.find(']');

			if (startPos != string::npos && endPos != string::npos && endPos > startPos - 1) {
				string position = command.substr(startPos + 1, endPos - startPos - 1);
				cout << "해당 포지션의 모든 챔피언을 삭제했습니다" << '\n';
				cout << '\n';

				if (!DeleteAllRecursive(players, MAX, 0, &position)) {
					cout << "잘못된 챔피언 입니다. 다시 입력해주세요" << '\n';
					cout << '\n';
				}
			}
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else if (command == "PrintAll_R") {
			cout << "배열에 저장된 순서대로 정보를 출력합니다" << '\n';
			cout << '\n';
			PrintAllRecursive(players, MAX, 0);
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else if (command == "FindMaxHp_R") {
			int MaxHealth = players[0].health;
			cout << "체력이 가장 큰 챔피언의 정보를 출력합니다" << '\n';
			cout << '\n';
			FindMaxHpRecursive(players, MAX, 0, &MaxHealth);
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else if (command == "SortByHp_R") {
			cout << "체력이 큰 순서대로 배열에 저장합니다" << '\n';
			cout << '\n';
			SortByHpRecursive(players, MAX, 0);
			cout << "명령어를 입력하세요" << '\n';
			cout << "Search_R[챔피언이름] : 주어진 챔피언 정보 출력" << '\n';
			cout << "Insert_R : 새로운 챔피언 삽입" << '\n';
			cout << "Delete_R[챔피언이름] : 주어진 챔피언 정보 삭제" << '\n';
			cout << "DeleteAll_R[position] : 해당 위치의 모든 챔피언 정보 삭제" << '\n';
			cout << "PrintAll_R : 배열에 저장된 순서대로 정보 출력" << '\n';
			cout << "FindMaxHp_R : 체력이 가장 큰 챔피언 정보 출력" << '\n';
			cout << "SortByHp_R : 체력이 큰 순서대로 배열에 저장" << '\n';
			cout << '\n';
		}
		else {
			cout << "잘못 입력하였습니다. 다시 입력해주세요" << '\n';
			cout << '\n';
		}
	}
}
